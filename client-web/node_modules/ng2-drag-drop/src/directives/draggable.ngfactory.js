/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var import0 = require('./draggable');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import3 = require('@angular/core/src/linker/view_utils');
var Wrapper_Draggable = (function () {
    function Wrapper_Draggable() {
        this._changed = false;
        this.context = new import0.Draggable();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
    }
    Wrapper_Draggable.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_Draggable.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
    };
    Wrapper_Draggable.prototype.check_dragData = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.dragData = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_Draggable.prototype.check_dragHandle = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.dragHandle = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_Draggable.prototype.check_dragEffect = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.dragEffect = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_Draggable.prototype.check_dragScope = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.dragScope = currValue;
            this._expr_3 = currValue;
        }
    };
    Wrapper_Draggable.prototype.check_dragOverClass = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.dragOverClass = currValue;
            this._expr_4 = currValue;
        }
    };
    Wrapper_Draggable.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_Draggable.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_5 = true;
        if (import3.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            view.renderer.setElementProperty(el, 'draggable', currVal_5);
            this._expr_5 = currVal_5;
        }
    };
    Wrapper_Draggable.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'dragstart')) {
            var pd_sub_0 = (this.context.dragStart($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'drag')) {
            var pd_sub_1 = (this.context.drag($event) !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'dragend')) {
            var pd_sub_2 = (this.context.dragEnd($event) !== false);
            result = (pd_sub_2 && result);
        }
        if ((eventName == 'mouseover')) {
            var pd_sub_3 = (this.context.mouseover($event) !== false);
            result = (pd_sub_3 && result);
        }
        return result;
    };
    Wrapper_Draggable.prototype.subscribe = function (view, _eventHandler, emit0, emit1, emit2) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.onDragStart.subscribe(_eventHandler.bind(view, 'onDragStart')));
        }
        if (emit1) {
            (this.subscription1 = this.context.onDrag.subscribe(_eventHandler.bind(view, 'onDrag')));
        }
        if (emit2) {
            (this.subscription2 = this.context.onDragEnd.subscribe(_eventHandler.bind(view, 'onDragEnd')));
        }
    };
    return Wrapper_Draggable;
}());
exports.Wrapper_Draggable = Wrapper_Draggable;
//# sourceMappingURL=draggable.ngfactory.js.map