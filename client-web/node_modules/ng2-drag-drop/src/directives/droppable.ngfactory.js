/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var import0 = require('./droppable');
var import1 = require('@angular/core/src/change_detection/change_detection_util');
var import3 = require('@angular/core/src/linker/view_utils');
var Wrapper_Droppable = (function () {
    function Wrapper_Droppable(p0) {
        this._changed = false;
        this.context = new import0.Droppable(p0);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
    }
    Wrapper_Droppable.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_Droppable.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
        (this.subscription2 && this.subscription2.unsubscribe());
        (this.subscription3 && this.subscription3.unsubscribe());
    };
    Wrapper_Droppable.prototype.check_dragOverClass = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.dragOverClass = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_Droppable.prototype.check_dropScope = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.dropScope = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_Droppable.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_Droppable.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_2 = true;
        if (import3.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            view.renderer.setElementProperty(el, 'draggable', currVal_2);
            this._expr_2 = currVal_2;
        }
    };
    Wrapper_Droppable.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'dragenter')) {
            var pd_sub_0 = (this.context.dragEnter($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'dragover')) {
            var pd_sub_1 = (this.context.dragOver($event) !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'dragleave')) {
            var pd_sub_2 = (this.context.dragLeave($event) !== false);
            result = (pd_sub_2 && result);
        }
        if ((eventName == 'drop')) {
            var pd_sub_3 = (this.context.drop($event) !== false);
            result = (pd_sub_3 && result);
        }
        return result;
    };
    Wrapper_Droppable.prototype.subscribe = function (view, _eventHandler, emit0, emit1, emit2, emit3) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.onDragEnter.subscribe(_eventHandler.bind(view, 'onDragEnter')));
        }
        if (emit1) {
            (this.subscription1 = this.context.onDragOver.subscribe(_eventHandler.bind(view, 'onDragOver')));
        }
        if (emit2) {
            (this.subscription2 = this.context.onDragLeave.subscribe(_eventHandler.bind(view, 'onDragLeave')));
        }
        if (emit3) {
            (this.subscription3 = this.context.onDrop.subscribe(_eventHandler.bind(view, 'onDrop')));
        }
    };
    return Wrapper_Droppable;
}());
exports.Wrapper_Droppable = Wrapper_Droppable;
//# sourceMappingURL=droppable.ngfactory.js.map