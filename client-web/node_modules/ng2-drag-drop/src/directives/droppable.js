"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var drop_event_model_1 = require("../shared/drop-event.model");
var ng2_drag_drop_service_1 = require("../services/ng2-drag-drop.service");
var Droppable = (function () {
    function Droppable(el, ng2DragDropService) {
        this.el = el;
        this.ng2DragDropService = ng2DragDropService;
        /**
         *  Event fired when Drag dragged element enters a valid drop target.
         */
        this.onDragEnter = new core_1.EventEmitter();
        /**
         * Event fired when an element is being dragged over a valid drop target
         */
        this.onDragOver = new core_1.EventEmitter();
        /**
         * Event fired when a dragged element leaves a valid drop target.
         */
        this.onDragLeave = new core_1.EventEmitter();
        /**
         * Event fired when an element is dropped on a valid drop target.
         */
        this.onDrop = new core_1.EventEmitter();
        /**
         * Defines compatible drag drop pairs. Values must match both in draggable and droppable.dropScope.
         */
        this.dropScope = 'default';
    }
    Droppable.prototype.dragEnter = function (e) {
        e.preventDefault();
        e.stopPropagation();
        this.onDragEnter.emit(e);
    };
    Droppable.prototype.dragOver = function (e) {
        if (this.allowDrop(e)) {
            if (this.el.nativeElement.classList != undefined && this.el.nativeElement.classList != null)
                this.el.nativeElement.classList.add(this.dragOverClass);
            e.preventDefault();
            this.onDragOver.emit(e);
        }
    };
    Droppable.prototype.dragLeave = function (e) {
        if (this.el.nativeElement.classList != undefined && this.el.nativeElement.classList != null)
            this.el.nativeElement.classList.remove(this.dragOverClass);
        e.preventDefault();
        this.onDragLeave.emit(e);
    };
    Droppable.prototype.drop = function (e) {
        if (this.el.nativeElement.classList != undefined && this.el.nativeElement.classList != null)
            this.el.nativeElement.classList.remove(this.dragOverClass);
        e.preventDefault();
        e.stopPropagation();
        this.onDrop.emit(new drop_event_model_1.DropEvent(e, this.ng2DragDropService.dragData));
    };
    Droppable.prototype.allowDrop = function (e) {
        var _this = this;
        var allowed = false;
        if (typeof this.dropScope === "string") {
            if (typeof this.ng2DragDropService.scope === "string")
                allowed = this.ng2DragDropService.scope === this.dropScope;
            else if (this.ng2DragDropService.scope instanceof Array)
                allowed = this.ng2DragDropService.scope.indexOf(this.dropScope) > -1;
        }
        else if (this.dropScope instanceof Array) {
            if (typeof this.ng2DragDropService.scope === "string")
                allowed = this.dropScope.indexOf(this.ng2DragDropService.scope) > -1;
            else if (this.ng2DragDropService.scope instanceof Array)
                allowed = this.dropScope.filter(function (item) {
                    return _this.ng2DragDropService.scope.indexOf(item) !== -1;
                }).length > 0;
        }
        return allowed;
    };
    return Droppable;
}());
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Droppable.prototype, "onDragEnter", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Droppable.prototype, "onDragOver", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Droppable.prototype, "onDragLeave", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Droppable.prototype, "onDrop", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Droppable.prototype, "dragOverClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Droppable.prototype, "dropScope", void 0);
__decorate([
    core_1.HostListener('dragenter', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Droppable.prototype, "dragEnter", null);
__decorate([
    core_1.HostListener('dragover', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Droppable.prototype, "dragOver", null);
__decorate([
    core_1.HostListener('dragleave', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Droppable.prototype, "dragLeave", null);
__decorate([
    core_1.HostListener('drop', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Droppable.prototype, "drop", null);
Droppable = __decorate([
    core_1.Directive({
        selector: '[droppable]'
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, ng2_drag_drop_service_1.Ng2DragDropService])
], Droppable);
exports.Droppable = Droppable;
//# sourceMappingURL=droppable.js.map